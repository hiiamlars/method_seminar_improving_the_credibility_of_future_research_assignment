kable(countries[, c("name", "iso_a3_eh", "geometry")], format = "html") |>
scroll_box(width = "100%", height = "400px")
countries_tidied <- countries |> #select and rename relevant columns
select(name = name, country_code = iso_a3_eh, borders = geometry)
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
sanity_check <- str_detect(countries_tidied$name, "^[A-Za-z\\s]+$") #checking for odd data points in `name`
odd_value <- which(sanity_check == FALSE)
countries_tidied$name[odd_value] #locating the odd data point (meaningful data structure in this case)
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #checking for odd data points in `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #locating the odd data point (looks like a missing data point in this case)
countries_tidied$name[odd_value] #identifying the respective country (missing data point seems reasonable in this case)
countries_tidied$country_code[odd_value] <- "KOS" #adding a country code manually
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #repeating the sanity check for `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #no more odd data points in `country_code`
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
#setting random generator for reproducibility
set.seed(456)
#number of entries in a column of `countries_tidied`
number_rows <- nrow(countries_tidied)
#characteristics of data distribution in a newly created column
#mean values
mean_val_old <- 6
mean_val_new <- 3.5
#standard distributions
sd_val_old <- 5
sd_val_new <- 3
#creating normally distributed values
loneliness_old <- rnorm(number_rows, mean = mean_val_old, sd = sd_val_old)
loneliness_new <- rnorm(number_rows, mean = mean_val_new, sd = sd_val_new)
#limiting data points to [0, 10] in order to represent a typical psychological assessment scale
loneliness_old <- pmax(0, pmin(10, loneliness_old))
loneliness_new <- pmax(0, pmin(10, loneliness_new))
#creating a data frame including both newly created columns
loneliness <- data.frame(loneliness_old, loneliness_new)
#print out
kable(loneliness, format = "html") |>
scroll_box(width = "100%", height = "400px")
#merging together the geographical data and the survey data
data_untidied <- cbind(countries_tidied, loneliness)
#print out
kable(data_untidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
data_prepared <- data_untidied |> #creating new change variable
mutate(loneliness_change = loneliness_new - loneliness_old)
#print out
kable(data_prepared, format = "html") |>
scroll_box(width = "100%", height = "400px")
#creating the good plot
good_plot <- ggplot(data = data_prepared) + #basic plot call
geom_sf(aes(fill = -1 * loneliness_change,
text = paste("Country:",
name,
"\nChange in percieved social integration [-10; 10]: ",
round(-1 * loneliness_change, 2))),
color = "black") + #creating the map of Europe (with inverted loneliness change values) and preparing hover-interaction
labs(title = "Difference of percieved social integration", #adding a title
subtitle = "Europe: 2015 - 2025", #adding a subtitle
caption = "Data Source: `natural earth` package and own simulations") + #adding a caption
scale_fill_gradient2(low = "#D55E00",
mid = "#F0E442",
high = "#009E73",
midpoint = 0,
limits = c(-10, 10), #setting the color range
breaks = c(-10, 0, 10), #setting breaks for the legend description
labels = c("", "", ""),   #displaying only the point zero
name = "Difference of percieved social integration \n by country") + #adding a legend description
coord_sf(xlim = c(-25, 45),
ylim = c(30, 85),
expand = FALSE) + #limiting the plot to continental Europe
theme_void() + #theme to minimize the plot design
theme(
aspect.ratio = 0.6, #widening the card
plot.margin = margin(10, 0, 10, 0), #keeping edge areas clear
legend.position = "bottom",  #positioning the legend at the bottom
legend.key.width = unit(1.5, "cm"),  #improving legends compactness
legend.key.height = unit(0.4, "cm"),  #improving legends compactness
legend.title = element_text(size = 9,
color = "#333333",
family = "helvetica",
vjust = 1),  #formatting legends title
plot.title = element_text(size = 12,
face = "bold",
color = "#333333",
family = "Arial"), #formatting the plot' title
plot.subtitle = element_text(size = 10,
face = "italic",
color = "#666666",
family = "Arial"), #formatting the plot' subtitle
plot.caption = element_text(size = 8,
face = "italic",
color = "#999999",
family = "Times New Roman") #formatting the plot' notes
) #additional design changes
# creating the interactive plot
good_interactive_plot <- ggplotly(good_plot, tooltip = "text")
#print out interactive plot
good_interactive_plot
#print out static plot
good_plot
#creating the bad plot
bad_plot <- ggplot(data = data_prepared) + #basic plot call
geom_bar(stat = "identity",
aes(x = factor(name,
levels = sample(unique(name))), #randomizing the order of countries
y = (-1*loneliness_change) / pi, #inverting and recalculating the y-axis
fill = (-1*loneliness_change / pi) + 3)) + #filling the bars by color
scale_fill_gradient2(low = "gray30",
mid = "gray90",
high = "gray30",
midpoint = sqrt(pi),
limits = c(-23, 60),
breaks = seq(-12.3, 45, round(6*pi,2)),
name = "y + 3") + #setting a distorting color range
scale_y_continuous(limits = c(-40.73, 4*sqrt(2)),
breaks = seq(-30.27, 13.04, 4.07*pi),
labels = function(x) parse(text = paste0(round(x, 2)," *pi"))) + #setting distorting y-labels
#  geom_hline(yintercept = 0,
#  color = "black",
#  linetype = "solid") + #emphasizing the x-axis
#  coord_flip() +
labs(title = "Change in percieved loneliness by European country * -1 from 2015 - 2025",
x = "Country",
y = "Change in Loneliness * -1 from 2015 - 2025") + #adding a plot title and axis titles
#  theme_void() +
theme(
panel.grid = element_blank(), #removing grid lines
panel.background = element_rect(fill = "grey90",
colour = NA), #editing background color
axis.ticks = element_blank(), #removing axis ticks
legend.position = "top", #rearranging legend
legend.direction = "vertical", #align legend
plot.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.x = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.y = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.text = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.text.x = element_text(size = 6,
color = "#77DD77"),  #editing size and color of...
axis.text.y = element_text(size = 6,
color = "#77DD77")  #editing size and color of...
)
#print out
bad_plot
#creating the good plot
good_plot <- ggplot(data = data_prepared) + #basic plot call
geom_sf(aes(fill = -1 * loneliness_change),
color = "black") + #creating the map of Europe (with inverted loneliness change values)
labs(title = "Difference of percieved social integration", #adding a title
subtitle = "Europe: 2015 - 2025", #adding a subtitle
caption = "Data Source: `natural earth` package and own simulations") + #adding a caption
scale_fill_gradient2(low = "#D55E00",
mid = "#F0E442",
high = "#009E73",
midpoint = 0,
limits = c(-10, 10), #setting the color range
breaks = c(-10, 0, 10), #setting breaks for the legend description
labels = c("", "", ""),   #displaying only the point zero
name = "Difference of percieved social integration \n by country") + #adding a legend description
coord_sf(xlim = c(-25, 45),
ylim = c(30, 85),
expand = FALSE) + #limiting the plot to continental Europe
theme_void() + #theme to minimize the plot design
theme(
aspect.ratio = 0.6, #widening the card
plot.margin = margin(10, 0, 10, 0), #keeping edge areas clear
legend.position = "bottom",  #positioning the legend at the bottom
legend.key.width = unit(1.5, "cm"),  #improving legends compactness
legend.key.height = unit(0.4, "cm"),  #improving legends compactness
legend.title = element_text(size = 9,
color = "#333333",
family = "helvetica",
vjust = 1),  #formatting legends title
plot.title = element_text(size = 12,
face = "bold",
color = "#333333",
family = "Arial"), #formatting the plot' title
plot.subtitle = element_text(size = 10,
face = "italic",
color = "#666666",
family = "Arial"), #formatting the plot' subtitle
plot.caption = element_text(size = 8,
face = "italic",
color = "#999999",
family = "Times New Roman") #formatting the plot' notes
) #additional design changes
#global output setting
knitr::opts_chunk$set(echo = TRUE)
#information about R-Studio version
sessionInfo()
library(rnaturalearth)
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(kableExtra)
countries <- rnaturalearth::ne_countries(continent = "europe", returnclass = "sf") #loading data of European countries and their borders from the package "rnaturalearth"
#print out (for selected columns to not display to much unnecessary information)
kable(countries[, c("name", "iso_a3_eh", "geometry")], format = "html") |>
scroll_box(width = "100%", height = "400px")
countries_tidied <- countries |> #select and rename relevant columns
select(name = name, country_code = iso_a3_eh, borders = geometry)
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
sanity_check <- str_detect(countries_tidied$name, "^[A-Za-z\\s]+$") #checking for odd data points in `name`
odd_value <- which(sanity_check == FALSE)
countries_tidied$name[odd_value] #locating the odd data point (meaningful data structure in this case)
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #checking for odd data points in `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #locating the odd data point (looks like a missing data point in this case)
countries_tidied$name[odd_value] #identifying the respective country (missing data point seems reasonable in this case)
countries_tidied$country_code[odd_value] <- "KOS" #adding a country code manually
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #repeating the sanity check for `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #no more odd data points in `country_code`
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
#setting random generator for reproducibility
set.seed(456)
#number of entries in a column of `countries_tidied`
number_rows <- nrow(countries_tidied)
#characteristics of data distribution in a newly created column
#mean values
mean_val_old <- 6
mean_val_new <- 3.5
#standard distributions
sd_val_old <- 5
sd_val_new <- 3
#creating normally distributed values
loneliness_old <- rnorm(number_rows, mean = mean_val_old, sd = sd_val_old)
loneliness_new <- rnorm(number_rows, mean = mean_val_new, sd = sd_val_new)
#limiting data points to [0, 10] in order to represent a typical psychological assessment scale
loneliness_old <- pmax(0, pmin(10, loneliness_old))
loneliness_new <- pmax(0, pmin(10, loneliness_new))
#creating a data frame including both newly created columns
loneliness <- data.frame(loneliness_old, loneliness_new)
#print out
kable(loneliness, format = "html") |>
scroll_box(width = "100%", height = "400px")
#merging together the geographical data and the survey data
data_untidied <- cbind(countries_tidied, loneliness)
#print out
kable(data_untidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
data_prepared <- data_untidied |> #creating new change variable
mutate(loneliness_change = loneliness_new - loneliness_old)
#print out
kable(data_prepared, format = "html") |>
scroll_box(width = "100%", height = "400px")
#creating the good plot
good_plot <- ggplot(data = data_prepared) + #basic plot call
geom_sf(aes(fill = -1 * loneliness_change), #inverting the`loneliness` values
color = "black") + #creating the map of Europe
labs(title = "Difference of percieved social integration", #adding a title
subtitle = "Europe: 2015 - 2025", #adding a subtitle
caption = "Data Source: `natural earth` package and own simulations") + #adding a caption
scale_fill_gradient2(low = "#D55E00",
mid = "#F0E442",
high = "#009E73",
midpoint = 0,
limits = c(-10, 10),
breaks = c(-10, 0, 10),
labels = c("", "", ""),
name = "Difference of percieved social integration \n by country") + #adding an intuitive and logical legend
coord_sf(xlim = c(-25, 45),
ylim = c(30, 85),
expand = FALSE) + #limiting the plot to continental Europe
theme_void() + #minimizing the design
theme(
aspect.ratio = 0.6, #widening the card
plot.margin = margin(10, 0, 10, 0), #keeping edge areas clear
legend.position = "bottom",  #positioning the legend at the bottom
legend.key.width = unit(1.5, "cm"),  #improving legends compactness
legend.key.height = unit(0.4, "cm"),  #improving legends compactness
legend.title = element_text(size = 9,
color = "#333333",
family = "helvetica",
vjust = 1),  #formatting legends title
plot.title = element_text(size = 12,
face = "bold",
color = "#333333",
family = "Arial"), #formatting the plot' title
plot.subtitle = element_text(size = 10,
face = "italic",
color = "#666666",
family = "Arial"), #formatting the plot' subtitle
plot.caption = element_text(size = 8,
face = "italic",
color = "#999999",
family = "Times New Roman") #formatting the plot' caption
) #additional design changes
#print out
good_plot
#creating the bad plot
bad_plot <- ggplot(data = data_prepared) + #basic plot call
geom_bar(stat = "identity", #setting metric value as relevant for bar height
aes(x = factor(name,
levels = sample(unique(name))), #randomizing the order of countries
y = (-1*loneliness_change) / pi, #inverting and recalculating the `loneliness` values
fill = (-1*loneliness_change / pi) + 3)) + #filling the bars by inverted and recalculated `loneliness` value
scale_fill_gradient2(low = "gray30",
mid = "gray90",
high = "gray30",
midpoint = sqrt(pi),
limits = c(-23, 60),
breaks = seq(-12.3, 45, round(6*pi,2)),
name = "y + 3") + #setting a distorting color range
scale_y_continuous(limits = c(-40.73, 4*sqrt(2)),
breaks = seq(-30.27, 13.04, 4.07*pi),
labels = function(x) parse(text = paste0(round(x, 2)," *pi"))) + #setting distorting y-labels
#  geom_hline(yintercept = 0,
#             color = "black",
#             linetype = "solid") + #emphasizing the x-axis
#  coord_flip() + #switching x-axis and y-axis
labs(title = "Change in percieved loneliness by European country * -1 from 2015 - 2025",
x = "Country",
y = "Change in Loneliness * -1 from 2015 - 2025") + #adding a plot title and axis titles
#  theme_void() + #minimizing the design
theme(
panel.grid = element_blank(), #removing grid lines
panel.background = element_rect(fill = "grey90",
colour = NA), #editing background color
axis.ticks = element_blank(), #removing axis ticks
legend.position = "top", #rearranging legend
legend.direction = "vertical", #align legend
plot.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.x = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.y = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.text = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.text.x = element_text(size = 6,
color = "#77DD77"),  #editing size and color of...
axis.text.y = element_text(size = 6,
color = "#77DD77")  #editing size and color of...
)
#print out
bad_plot
#global output setting
knitr::opts_chunk$set(echo = TRUE)
#information about R-Studio version
sessionInfo()
library(rnaturalearth)
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(kableExtra)
countries <- rnaturalearth::ne_countries(continent = "europe", returnclass = "sf") #loading data of European countries and their borders from the package "rnaturalearth"
#print out (for selected columns to not display to much unnecessary information)
kable(countries[, c("name", "iso_a3_eh", "geometry")], format = "html") |>
scroll_box(width = "100%", height = "400px")
countries_tidied <- countries |> #select and rename relevant columns
select(name = name, country_code = iso_a3_eh, borders = geometry)
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
sanity_check <- str_detect(countries_tidied$name, "^[A-Za-z\\s]+$") #checking for odd data points in `name`
odd_value <- which(sanity_check == FALSE)
countries_tidied$name[odd_value] #locating the odd data point (meaningful data structure in this case)
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #checking for odd data points in `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #locating the odd data point (looks like a missing data point in this case)
countries_tidied$name[odd_value] #identifying the respective country (missing data point seems reasonable in this case)
countries_tidied$country_code[odd_value] <- "KOS" #adding a country code manually
sanity_check <- str_detect(countries_tidied$country_code, "^[A-Za-z\\s]+$") #repeating the sanity check for `country_code`
odd_value <- which(sanity_check == FALSE)
countries_tidied$country_code[odd_value] #no more odd data points in `country_code`
#print out
kable(countries_tidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
#setting random generator for reproducibility
set.seed(456)
#number of entries in a column of `countries_tidied`
number_rows <- nrow(countries_tidied)
#characteristics of data distribution in a newly created column
#mean values
mean_val_old <- 6
mean_val_new <- 3.5
#standard distributions
sd_val_old <- 5
sd_val_new <- 3
#creating normally distributed values
loneliness_old <- rnorm(number_rows, mean = mean_val_old, sd = sd_val_old)
loneliness_new <- rnorm(number_rows, mean = mean_val_new, sd = sd_val_new)
#limiting data points to [0, 10] in order to represent a typical psychological assessment scale
loneliness_old <- pmax(0, pmin(10, loneliness_old))
loneliness_new <- pmax(0, pmin(10, loneliness_new))
#creating a data frame including both newly created columns
loneliness <- data.frame(loneliness_old, loneliness_new)
#print out
kable(loneliness, format = "html") |>
scroll_box(width = "100%", height = "400px")
#merging together the geographical data and the survey data
data_untidied <- cbind(countries_tidied, loneliness)
#print out
kable(data_untidied, format = "html") |>
scroll_box(width = "100%", height = "400px")
data_prepared <- data_untidied |> #creating new change variable
mutate(loneliness_change = loneliness_new - loneliness_old)
#print out
kable(data_prepared, format = "html") |>
scroll_box(width = "100%", height = "400px")
#creating the good plot
good_plot <- ggplot(data = data_prepared) + #basic plot call
geom_sf(aes(fill = -1 * loneliness_change), #inverting the `loneliness` values
color = "black") + #creating the map of Europe
labs(title = "Difference of percieved social integration", #adding a title
subtitle = "Europe: 2015 - 2025", #adding a subtitle
caption = "Data Source: `natural earth` package and own simulations") + #adding a caption
scale_fill_gradient2(low = "#D55E00",
mid = "#F0E442",
high = "#009E73",
midpoint = 0,
limits = c(-10, 10),
breaks = c(-10, 0, 10),
labels = c("", "", ""),
name = "Difference of percieved social integration \n by country") + #adding an logical and intuitive legend
coord_sf(xlim = c(-25, 45),
ylim = c(30, 85),
expand = FALSE) + #limiting the plot to continental Europe
theme_void() + #minimizing the design
theme(
aspect.ratio = 0.6, #widening the card
plot.margin = margin(10, 0, 10, 0), #keeping edge areas clear
legend.position = "bottom",  #positioning the legend at the bottom
legend.key.width = unit(1.5, "cm"),  #improving legends compactness
legend.key.height = unit(0.4, "cm"),  #improving legends compactness
legend.title = element_text(size = 9,
color = "#333333",
family = "helvetica",
vjust = 1),  #formatting legends title
plot.title = element_text(size = 12,
face = "bold",
color = "#333333",
family = "Arial"), #formatting the plot' title
plot.subtitle = element_text(size = 10,
face = "italic",
color = "#666666",
family = "Arial"), #formatting the plot' subtitle
plot.caption = element_text(size = 8,
face = "italic",
color = "#999999",
family = "Times New Roman") #formatting the plot' caption
) #additional design changes
#print out
good_plot
#creating the bad plot
bad_plot <- ggplot(data = data_prepared) + #basic plot call
geom_bar(stat = "identity", #setting metric value as relevant for bar height
aes(x = factor(name,
levels = sample(unique(name))), #randomizing the order of countries
y = (-1*loneliness_change) / pi, #inverting and recalculating the `loneliness` values
fill = (-1*loneliness_change / pi) + 3)) + #filling the bars by inverted and recalculated `loneliness` value
scale_fill_gradient2(low = "gray30",
mid = "gray90",
high = "gray30",
midpoint = sqrt(pi),
limits = c(-23, 60),
breaks = seq(-12.3, 45, round(6*pi,2)),
name = "y + 3") + #setting a distorting color range
scale_y_continuous(limits = c(-40.73, 4*sqrt(2)),
breaks = seq(-30.27, 13.04, 4.07*pi),
labels = function(x) parse(text = paste0(round(x, 2)," *pi"))) + #setting distorting y-labels
#  geom_hline(yintercept = 0,
#             color = "black",
#             linetype = "solid") + #emphasizing the x-axis
#  coord_flip() + #switching x-axis and y-axis
labs(title = "Change in percieved loneliness by European country * -1 from 2015 - 2025",
x = "Country",
y = "Change in Loneliness * -1 from 2015 - 2025") + #adding a plot title and axis titles
#  theme_void() + #minimizing the design
theme(
panel.grid = element_blank(), #removing grid lines
panel.background = element_rect(fill = "grey90",
colour = NA), #editing background color
axis.ticks = element_blank(), #removing axis ticks
legend.position = "top", #rearranging legend
legend.direction = "vertical", #align legend
plot.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.x = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.title.y = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.title = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
legend.text = element_text(size = 6,
color = "#77DD77"), #editing size and color of...
axis.text.x = element_text(size = 6,
color = "#77DD77"),  #editing size and color of...
axis.text.y = element_text(size = 6,
color = "#77DD77")  #editing size and color of...
)
#print out
bad_plot
